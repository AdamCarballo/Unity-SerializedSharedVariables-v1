/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/*
 * SerializedSharedVariablesGenerator
 * SSV generator. Used by SerializedSharedVariables script to generate new SSV
 *
 * by Adam Carballo (AdamCarballo).
 * https://github.com/AdamCarballo/Unity-SerializedSharedVariables
 */

using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace EngyneCreations.SSV.Editor {
	public static class SerializedSharedVariablesGenerator {

		private const string AutoGeneratedComment = "// This class is Auto-Generated";

		public static void GenerateNewVariableData(string typeFullName, string path) {
			string typeName = ExtractTypeNameFromFullName(typeFullName);
			string variableClass = $"{typeName}Variable";
			string referenceClass = $"{typeName}Reference";

			// The generated filepath
			var scriptFile = Path.Combine(Application.dataPath, path, $"{variableClass}.cs");

			// The class string
			StringBuilder sb = new StringBuilder();
			sb.AppendLine(AutoGeneratedComment);
			sb.AppendLine("using EngyneCreations.SSV.Models;");
			sb.AppendLine("");
			sb.AppendLine("namespace EngyneCreations.SSV.Variables {");
			sb.AppendLine("");
			sb.AppendLine($"    public class {variableClass} : SerializedSharedVariable<{typeFullName}> {{ }}");
			sb.AppendLine("");
			sb.AppendLine("    [System.Serializable]");
			sb.AppendLine($"    public class {referenceClass} : SerializedSharedReference<{variableClass}, {typeFullName}> {{ }}");
			sb.AppendLine("}");

			// Writes the class and imports it so it is visible in the Project window
			File.WriteAllText(scriptFile, sb.ToString(), Encoding.UTF8);

			var relativePath = Path.Combine("Assets", path, $"{variableClass}.cs");
			AssetDatabase.ImportAsset(relativePath);
		}

		public static void GenerateNewVariableEditor(string typeFullName, string path) {
			string typeName = ExtractTypeNameFromFullName(typeFullName);
			string variableClass = typeName + "Variable";
			string referenceClass = typeName + "Reference";
			string referenceDrawerClass = referenceClass + "Drawer";

			// The generated filepath
			var scriptFile = Path.Combine(Application.dataPath, path, $"{referenceDrawerClass}.cs");

			// The class string
			StringBuilder sb = new StringBuilder();
			sb.AppendLine(AutoGeneratedComment);
			sb.AppendLine("using EngyneCreations.SSV.Editor;");
			sb.AppendLine("using EngyneCreations.SSV.Models.Editor;");
			sb.AppendLine("");
			sb.AppendLine("namespace EngyneCreations.SSV.Variables.Editor {");
			sb.AppendLine("");
			sb.AppendLine($"    [UnityEditor.CustomPropertyDrawer(typeof({referenceClass}))]");

			sb.AppendLine($"    public class {referenceDrawerClass} : SerializedSharedReferenceDrawer {{");
			sb.AppendLine("");
			sb.AppendLine($"        [UnityEditor.MenuItem(MenuItemCreatePath + \"{typeName}\", false, 100)]");
			sb.AppendLine("        public static void CreateAsset() {");
			sb.AppendLine($"            SerializedVariablesHelper.CreateAsset<{variableClass}>();");
			sb.AppendLine("        }");
			sb.AppendLine("    }");
			sb.AppendLine("}");

			// Writes the class and imports it so it is visible in the Project window
			File.WriteAllText(scriptFile, sb.ToString(), Encoding.UTF8);

			var relativePath = Path.Combine("Assets", path, $"{referenceDrawerClass}.cs");
			AssetDatabase.ImportAsset(relativePath);
		}
		
		private static string ExtractTypeNameFromFullName(string fullName) {
			var name = !fullName.Contains(".") ? fullName : fullName.Split('.').Last();
			return name.FirstLetterToUpper();
		}
		
		private static string FirstLetterToUpper(this string str) {
			if (str == null) return null;
			if (str.Length > 1) return char.ToUpper(str[0]) + str.Substring(1);

			return str.ToUpper();
		}

	}
}